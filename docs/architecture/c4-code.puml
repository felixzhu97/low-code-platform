 @startuml
!include ./c4-plantuml/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Felix 低代码平台 - 代码级别架构

Container_Boundary(webapp, "Web应用") {
    
    ' 领域实体类型定义
    Component(ComponentType, "Component Interface", "TypeScript", "组件数据结构定义\n- id: string\n- type: string\n- name: string\n- position?: {x, y}\n- properties?: Record<string, any>\n- children?: Component[]\n- parentId?: string | null")
    
    Component(DataSourceType, "DataSource Interface", "TypeScript", "数据源类型定义\n- id: string\n- name: string\n- type: 'static' | 'api' | 'database'\n- data: any")
    
    Component(ThemeConfigType, "ThemeConfig Interface", "TypeScript", "主题配置结构\n- primaryColor: string\n- secondaryColor: string\n- backgroundColor: string\n- textColor: string\n- fontFamily: string")
    
    ' 应用服务类
    Component(ComponentService, "ComponentManagementService", "TypeScript Class", "组件管理服务\n+ getComponentData()\n+ deleteComponentAndChildren()\n+ updateComponentPosition()\n+ getRootComponents()\n+ getChildComponents()\n+ createComponent()\n+ snapToGrid()\n+ isContainer()")
    
    Component(FactoryService, "ComponentFactoryService", "TypeScript Class", "组件工厂服务\n+ createComponent()\n+ getDefaultProperties()\n+ isContainer()\n+ validateComponent()")
    
    Component(HistoryService, "History Service", "TypeScript Module", "历史管理服务\n+ createHistory()\n+ addToHistory()\n+ undo()\n+ redo()\n+ canUndo()\n+ canRedo()")
    
    ' React 组件
    Component(CanvasComponent, "Canvas Component", "React FC", "画布组件\nconst Canvas = () => {\n  const [components, setComponents]\n  const [selectedId, setSelectedId]\n  const handleDrop = useCallback()\n  const handleSelect = useCallback()\n  return <div onDrop={handleDrop}>...</div>\n}")
    
    Component(ComponentPanel, "ComponentPanel", "React FC", "组件面板\nconst ComponentPanel = () => {\n  const categories = useMemo()\n  const handleDragStart = useCallback()\n  return <div>...</div>\n}")
    
    Component(PropertiesPanel, "PropertiesPanel", "React FC", "属性面板\nconst PropertiesPanel = ({ component }) => {\n  const form = useForm()\n  const handleSubmit = useCallback()\n  return <form onSubmit={handleSubmit}>...</form>\n}")
    
    ' 图表组件
    Component(BarChartComponent, "BarChart Component", "React FC", "柱状图组件\nconst BarChart = ({ data, config }) => {\n  return (\n    <ResponsiveContainer>\n      <BarChart data={data}>\n        <Bar dataKey={config.yField} />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}")
    
    Component(LineChartComponent, "LineChart Component", "React FC", "折线图组件\nconst LineChart = ({ data, config }) => {\n  return (\n    <ResponsiveContainer>\n      <LineChart data={data}>\n        <Line dataKey={config.yField} />\n      </LineChart>\n    </ResponsiveContainer>\n  )\n}")
    
    ' 组件渲染器
    Component(BasicRenderer, "BasicComponentRenderer", "React FC", "基础组件渲染器\nconst BasicComponentRenderer = ({ component }) => {\n  switch (component.type) {\n    case 'button': return <Button {...component.properties} />\n    case 'input': return <Input {...component.properties} />\n    case 'text': return <Text {...component.properties} />\n    default: return null\n  }\n}")
    
    Component(ChartRenderer, "ChartComponentRenderer", "React FC", "图表组件渲染器\nconst ChartComponentRenderer = ({ component }) => {\n  const { type, properties } = component\n  switch (type) {\n    case 'bar-chart': return <BarChart {...properties} />\n    case 'line-chart': return <LineChart {...properties} />\n    default: return null\n  }\n}")
    
    ' 自定义 Hooks
    Component(CanvasDragHook, "useCanvasDrag Hook", "Custom Hook", "拖拽逻辑Hook\nconst useCanvasDrag = () => {\n  const [{ isOver }, drop] = useDrop()\n  const handleDrop = useCallback()\n  const handleDragOver = useCallback()\n  return { drop, isOver, handleDrop }\n}")
    
    Component(ComponentInteractionHook, "useComponentInteraction Hook", "Custom Hook", "组件交互Hook\nconst useComponentInteraction = () => {\n  const [selectedComponent, setSelectedComponent]\n  const handleSelect = useCallback()\n  const handleUpdate = useCallback()\n  return { selectedComponent, handleSelect, handleUpdate }\n}")
}

' 类型依赖关系
Rel(ComponentService, ComponentType, "使用", "类型约束")
Rel(ComponentService, FactoryService, "调用", "组件创建")
Rel(FactoryService, ComponentType, "创建", "实例化")
Rel(ComponentService, HistoryService, "使用", "历史记录")

' React 组件依赖关系
Rel(CanvasComponent, ComponentService, "调用", "业务逻辑")
Rel(CanvasComponent, CanvasDragHook, "使用", "拖拽逻辑")
Rel(CanvasComponent, ComponentInteractionHook, "使用", "交互逻辑")
Rel(PropertiesPanel, ComponentType, "编辑", "属性配置")
Rel(ComponentPanel, ComponentType, "显示", "组件列表")

' 渲染器依赖关系
Rel(BasicRenderer, ComponentType, "渲染", "基础组件")
Rel(ChartRenderer, BarChartComponent, "使用", "图表渲染")
Rel(ChartRenderer, LineChartComponent, "使用", "图表渲染")
Rel(CanvasComponent, BasicRenderer, "调用", "组件渲染")
Rel(CanvasComponent, ChartRenderer, "调用", "图表渲染")

' 数据流关系
Rel(CanvasComponent, ComponentService, "状态管理", "组件数据")
Rel(PropertiesPanel, ComponentService, "属性更新", "组件配置")
Rel(ComponentPanel, FactoryService, "组件创建", "拖拽添加")

@enduml